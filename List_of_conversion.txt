//
#


←
=


DECLARE
#DECLARE


<identifier>[index]
<identifier>[index]


<>
!=


<statement> AND <statement>
<statement> and <statement>


<statement> OR <statement>
<statement> or <statement>


NOT <statement>
not <statement>


RIGHT(ThisString: STRING, x:INTEGER)
ThisString[0:x]


LENGTH(ThisString: STRING)
len(ThisString)


MID(ThisString: STRING, x:INTEGER, y:INTEGER)
ThisString[x:x+y]


LCASE(ThisChar: CHAR)
ThisChar.lower


UCASE(ThisChar: CHAR)
ThisChar.upper


&
+


IF <condition>
    THEN
        <statement(s)>
ENDIF

if <condition>:
    <statement(s)>


IF <condition>
    THEN
        <statement(s)>
    ELSE
        <statement(s)>
ENDIF

if <condition>:
    <statement(s)>
else:
    <statement(s)>


CASE OF <identifier>
    <value1> : <statement1>
               <statement2>
    <value2> : <statement1>
               <statement2>
    OTHERWISE: <statement1>
               <statement2>
ENDCASE

if <identifier> = <value1>:
    <statement1>
    <statement2>
elif:<identifier> = <value2>:
    <statement1>
    <statement2>
else:
    <statement1>
    <statement2>


FOR <identifier> ← <value1> TO <value2>
    <statements>
NEXT <identifier>

for <identifier> in range(<value1>,<value2>)
    <statements>


REPEAT
    <statement(s)>
UNTIL <condition>

<statement(s)>
while <condition>:
    <statement(s)>


WHILE <condition>
    <statement(s)>
ENDWHILE

while <condition>:
    <statement(s)>


PROCEDURE <identifier>
    <statement(s)>
ENDPROCEDURE

def <identifier>():
    <statement(s)>


PROCEDURE <identifier>(<para1>:<datatype>, <para2>:<datatype>)
    <statement(s)>
ENDPROCEDURE

def <identifier>(<para1>,<para2>):
    <statement(s)>


CALL <identifier>
<identifier>()


CALL <identifier>(Value1, Value2)
<identifier>(Value1, Value2)


FUNCTION <identifier> RETURNS <data type>
    <statement(s)>
ENDFUNCTION

def <identifier>():
    <statement(s)>
    return <variable>


FUNCTION <identifier>(<para1>:<datatype>, <para2>:<datatype>) RETURNS <data type>
    <statement(s)>
ENDFUNCTION
           
def <identifier>(<para1>,<para2>):
    <statement(s)>
    return <variable>


PROCEDURE <identifier>(BYREF <para1>:<datatype>, <para2>:<datatype>)
    <statement(s)>
ENDPROCEDURE

def <identifier>(<para1>,<para2>):
    global <para1>
    <statement(s)>


OPENFILE <File identifier> FOR <File mode>
<File mode> : READ / WRITE / APPEND

open(<File identifier>, mode = <File mode>)
<File mode> : r / w / a


READFILE <File identifier>, <variable: STRING>
<variable> = <File identifier>.readline()


EOF(<File identifier>)
NextLine = ""

WRITEFILE <File identifier>, <data>
<File identifier>.write(<data>)


CLOSEFILE <File identifier>
<File identifier>.close()

